
week2 GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df4  08002df4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dfc  08002dfc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000040  08002e40  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002e40  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057b5  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001147  00000000  00000000  00025821  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e8  00000000  00000000  00026968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  00026f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014701  00000000  00000000  000274a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fe2  00000000  00000000  0003bba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080ec3  00000000  00000000  00040b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001948  00000000  00000000  000c1ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002dc4 	.word	0x08002dc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08002dc4 	.word	0x08002dc4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b9ac 	b.w	8000ce4 <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f000 f840 	bl	8000a18 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2lz>:
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	2200      	movs	r2, #0
 80009a8:	2300      	movs	r3, #0
 80009aa:	4604      	mov	r4, r0
 80009ac:	460d      	mov	r5, r1
 80009ae:	f000 f9fb 	bl	8000da8 <__aeabi_dcmplt>
 80009b2:	b928      	cbnz	r0, 80009c0 <__aeabi_d2lz+0x1c>
 80009b4:	4620      	mov	r0, r4
 80009b6:	4629      	mov	r1, r5
 80009b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009bc:	f000 b80a 	b.w	80009d4 <__aeabi_d2ulz>
 80009c0:	4620      	mov	r0, r4
 80009c2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80009c6:	f000 f805 	bl	80009d4 <__aeabi_d2ulz>
 80009ca:	4240      	negs	r0, r0
 80009cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009d0:	bd38      	pop	{r3, r4, r5, pc}
 80009d2:	bf00      	nop

080009d4 <__aeabi_d2ulz>:
 80009d4:	b5d0      	push	{r4, r6, r7, lr}
 80009d6:	2200      	movs	r2, #0
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <__aeabi_d2ulz+0x3c>)
 80009da:	4606      	mov	r6, r0
 80009dc:	460f      	mov	r7, r1
 80009de:	f7ff fdb7 	bl	8000550 <__aeabi_dmul>
 80009e2:	f000 fa09 	bl	8000df8 <__aeabi_d2uiz>
 80009e6:	4604      	mov	r4, r0
 80009e8:	f7ff fd38 	bl	800045c <__aeabi_ui2d>
 80009ec:	2200      	movs	r2, #0
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <__aeabi_d2ulz+0x40>)
 80009f0:	f7ff fdae 	bl	8000550 <__aeabi_dmul>
 80009f4:	4602      	mov	r2, r0
 80009f6:	460b      	mov	r3, r1
 80009f8:	4630      	mov	r0, r6
 80009fa:	4639      	mov	r1, r7
 80009fc:	f7ff fbf0 	bl	80001e0 <__aeabi_dsub>
 8000a00:	f000 f9fa 	bl	8000df8 <__aeabi_d2uiz>
 8000a04:	2200      	movs	r2, #0
 8000a06:	4623      	mov	r3, r4
 8000a08:	4310      	orrs	r0, r2
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	bdd0      	pop	{r4, r6, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	3df00000 	.word	0x3df00000
 8000a14:	41f00000 	.word	0x41f00000

08000a18 <__udivmoddi4>:
 8000a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a1c:	9e08      	ldr	r6, [sp, #32]
 8000a1e:	4604      	mov	r4, r0
 8000a20:	4688      	mov	r8, r1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d14b      	bne.n	8000abe <__udivmoddi4+0xa6>
 8000a26:	428a      	cmp	r2, r1
 8000a28:	4615      	mov	r5, r2
 8000a2a:	d967      	bls.n	8000afc <__udivmoddi4+0xe4>
 8000a2c:	fab2 f282 	clz	r2, r2
 8000a30:	b14a      	cbz	r2, 8000a46 <__udivmoddi4+0x2e>
 8000a32:	f1c2 0720 	rsb	r7, r2, #32
 8000a36:	fa01 f302 	lsl.w	r3, r1, r2
 8000a3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000a3e:	4095      	lsls	r5, r2
 8000a40:	ea47 0803 	orr.w	r8, r7, r3
 8000a44:	4094      	lsls	r4, r2
 8000a46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a4a:	0c23      	lsrs	r3, r4, #16
 8000a4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a50:	fa1f fc85 	uxth.w	ip, r5
 8000a54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000a60:	4299      	cmp	r1, r3
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x60>
 8000a64:	18eb      	adds	r3, r5, r3
 8000a66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a6a:	f080 811b 	bcs.w	8000ca4 <__udivmoddi4+0x28c>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 8118 	bls.w	8000ca4 <__udivmoddi4+0x28c>
 8000a74:	3f02      	subs	r7, #2
 8000a76:	442b      	add	r3, r5
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a8c:	45a4      	cmp	ip, r4
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x8c>
 8000a90:	192c      	adds	r4, r5, r4
 8000a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a96:	f080 8107 	bcs.w	8000ca8 <__udivmoddi4+0x290>
 8000a9a:	45a4      	cmp	ip, r4
 8000a9c:	f240 8104 	bls.w	8000ca8 <__udivmoddi4+0x290>
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	442c      	add	r4, r5
 8000aa4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aa8:	eba4 040c 	sub.w	r4, r4, ip
 8000aac:	2700      	movs	r7, #0
 8000aae:	b11e      	cbz	r6, 8000ab8 <__udivmoddi4+0xa0>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ab8:	4639      	mov	r1, r7
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xbe>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	f000 80eb 	beq.w	8000c9e <__udivmoddi4+0x286>
 8000ac8:	2700      	movs	r7, #0
 8000aca:	e9c6 0100 	strd	r0, r1, [r6]
 8000ace:	4638      	mov	r0, r7
 8000ad0:	4639      	mov	r1, r7
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f783 	clz	r7, r3
 8000ada:	2f00      	cmp	r7, #0
 8000adc:	d147      	bne.n	8000b6e <__udivmoddi4+0x156>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd0>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80fa 	bhi.w	8000cdc <__udivmoddi4+0x2c4>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	4698      	mov	r8, r3
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa0>
 8000af6:	e9c6 4800 	strd	r4, r8, [r6]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa0>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xe8>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 808f 	bne.w	8000c28 <__udivmoddi4+0x210>
 8000b0a:	1b49      	subs	r1, r1, r5
 8000b0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b10:	fa1f f885 	uxth.w	r8, r5
 8000b14:	2701      	movs	r7, #1
 8000b16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b1a:	0c23      	lsrs	r3, r4, #16
 8000b1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b24:	fb08 f10c 	mul.w	r1, r8, ip
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d907      	bls.n	8000b3c <__udivmoddi4+0x124>
 8000b2c:	18eb      	adds	r3, r5, r3
 8000b2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x122>
 8000b34:	4299      	cmp	r1, r3
 8000b36:	f200 80cd 	bhi.w	8000cd4 <__udivmoddi4+0x2bc>
 8000b3a:	4684      	mov	ip, r0
 8000b3c:	1a59      	subs	r1, r3, r1
 8000b3e:	b2a3      	uxth	r3, r4
 8000b40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b4c:	fb08 f800 	mul.w	r8, r8, r0
 8000b50:	45a0      	cmp	r8, r4
 8000b52:	d907      	bls.n	8000b64 <__udivmoddi4+0x14c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	d202      	bcs.n	8000b62 <__udivmoddi4+0x14a>
 8000b5c:	45a0      	cmp	r8, r4
 8000b5e:	f200 80b6 	bhi.w	8000cce <__udivmoddi4+0x2b6>
 8000b62:	4618      	mov	r0, r3
 8000b64:	eba4 0408 	sub.w	r4, r4, r8
 8000b68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b6c:	e79f      	b.n	8000aae <__udivmoddi4+0x96>
 8000b6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000b72:	40bb      	lsls	r3, r7
 8000b74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000b80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b8c:	4325      	orrs	r5, r4
 8000b8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b92:	0c2c      	lsrs	r4, r5, #16
 8000b94:	fb08 3319 	mls	r3, r8, r9, r3
 8000b98:	fa1f fa8e 	uxth.w	sl, lr
 8000b9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ba0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	fa02 f207 	lsl.w	r2, r2, r7
 8000baa:	fa00 f107 	lsl.w	r1, r0, r7
 8000bae:	d90b      	bls.n	8000bc8 <__udivmoddi4+0x1b0>
 8000bb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000bb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bb8:	f080 8087 	bcs.w	8000cca <__udivmoddi4+0x2b2>
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	f240 8084 	bls.w	8000cca <__udivmoddi4+0x2b2>
 8000bc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000bc6:	4473      	add	r3, lr
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	b2ad      	uxth	r5, r5
 8000bcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bdc:	45a2      	cmp	sl, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1da>
 8000be0:	eb1e 0404 	adds.w	r4, lr, r4
 8000be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be8:	d26b      	bcs.n	8000cc2 <__udivmoddi4+0x2aa>
 8000bea:	45a2      	cmp	sl, r4
 8000bec:	d969      	bls.n	8000cc2 <__udivmoddi4+0x2aa>
 8000bee:	3802      	subs	r0, #2
 8000bf0:	4474      	add	r4, lr
 8000bf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bf6:	fba0 8902 	umull	r8, r9, r0, r2
 8000bfa:	eba4 040a 	sub.w	r4, r4, sl
 8000bfe:	454c      	cmp	r4, r9
 8000c00:	46c2      	mov	sl, r8
 8000c02:	464b      	mov	r3, r9
 8000c04:	d354      	bcc.n	8000cb0 <__udivmoddi4+0x298>
 8000c06:	d051      	beq.n	8000cac <__udivmoddi4+0x294>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d069      	beq.n	8000ce0 <__udivmoddi4+0x2c8>
 8000c0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000c10:	eb64 0403 	sbc.w	r4, r4, r3
 8000c14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c18:	40fd      	lsrs	r5, r7
 8000c1a:	40fc      	lsrs	r4, r7
 8000c1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000c20:	e9c6 5400 	strd	r5, r4, [r6]
 8000c24:	2700      	movs	r7, #0
 8000c26:	e747      	b.n	8000ab8 <__udivmoddi4+0xa0>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000c30:	4095      	lsls	r5, r2
 8000c32:	fa01 f002 	lsl.w	r0, r1, r2
 8000c36:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	4338      	orrs	r0, r7
 8000c40:	0c01      	lsrs	r1, r0, #16
 8000c42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c46:	fa1f f885 	uxth.w	r8, r5
 8000c4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c52:	fb07 f308 	mul.w	r3, r7, r8
 8000c56:	428b      	cmp	r3, r1
 8000c58:	fa04 f402 	lsl.w	r4, r4, r2
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x256>
 8000c5e:	1869      	adds	r1, r5, r1
 8000c60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c64:	d22f      	bcs.n	8000cc6 <__udivmoddi4+0x2ae>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d92d      	bls.n	8000cc6 <__udivmoddi4+0x2ae>
 8000c6a:	3f02      	subs	r7, #2
 8000c6c:	4429      	add	r1, r5
 8000c6e:	1acb      	subs	r3, r1, r3
 8000c70:	b281      	uxth	r1, r0
 8000c72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb00 f308 	mul.w	r3, r0, r8
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x27e>
 8000c86:	1869      	adds	r1, r5, r1
 8000c88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c8c:	d217      	bcs.n	8000cbe <__udivmoddi4+0x2a6>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d915      	bls.n	8000cbe <__udivmoddi4+0x2a6>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4429      	add	r1, r5
 8000c96:	1ac9      	subs	r1, r1, r3
 8000c98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c9c:	e73b      	b.n	8000b16 <__udivmoddi4+0xfe>
 8000c9e:	4637      	mov	r7, r6
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	e709      	b.n	8000ab8 <__udivmoddi4+0xa0>
 8000ca4:	4607      	mov	r7, r0
 8000ca6:	e6e7      	b.n	8000a78 <__udivmoddi4+0x60>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	e6fb      	b.n	8000aa4 <__udivmoddi4+0x8c>
 8000cac:	4541      	cmp	r1, r8
 8000cae:	d2ab      	bcs.n	8000c08 <__udivmoddi4+0x1f0>
 8000cb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000cb8:	3801      	subs	r0, #1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	e7a4      	b.n	8000c08 <__udivmoddi4+0x1f0>
 8000cbe:	4660      	mov	r0, ip
 8000cc0:	e7e9      	b.n	8000c96 <__udivmoddi4+0x27e>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	e795      	b.n	8000bf2 <__udivmoddi4+0x1da>
 8000cc6:	4667      	mov	r7, ip
 8000cc8:	e7d1      	b.n	8000c6e <__udivmoddi4+0x256>
 8000cca:	4681      	mov	r9, r0
 8000ccc:	e77c      	b.n	8000bc8 <__udivmoddi4+0x1b0>
 8000cce:	3802      	subs	r0, #2
 8000cd0:	442c      	add	r4, r5
 8000cd2:	e747      	b.n	8000b64 <__udivmoddi4+0x14c>
 8000cd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd8:	442b      	add	r3, r5
 8000cda:	e72f      	b.n	8000b3c <__udivmoddi4+0x124>
 8000cdc:	4638      	mov	r0, r7
 8000cde:	e708      	b.n	8000af2 <__udivmoddi4+0xda>
 8000ce0:	4637      	mov	r7, r6
 8000ce2:	e6e9      	b.n	8000ab8 <__udivmoddi4+0xa0>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__gedf2>:
 8000ce8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cec:	e006      	b.n	8000cfc <__cmpdf2+0x4>
 8000cee:	bf00      	nop

08000cf0 <__ledf2>:
 8000cf0:	f04f 0c01 	mov.w	ip, #1
 8000cf4:	e002      	b.n	8000cfc <__cmpdf2+0x4>
 8000cf6:	bf00      	nop

08000cf8 <__cmpdf2>:
 8000cf8:	f04f 0c01 	mov.w	ip, #1
 8000cfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d0c:	bf18      	it	ne
 8000d0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d12:	d01b      	beq.n	8000d4c <__cmpdf2+0x54>
 8000d14:	b001      	add	sp, #4
 8000d16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d1a:	bf0c      	ite	eq
 8000d1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d20:	ea91 0f03 	teqne	r1, r3
 8000d24:	bf02      	ittt	eq
 8000d26:	ea90 0f02 	teqeq	r0, r2
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	4770      	bxeq	lr
 8000d2e:	f110 0f00 	cmn.w	r0, #0
 8000d32:	ea91 0f03 	teq	r1, r3
 8000d36:	bf58      	it	pl
 8000d38:	4299      	cmppl	r1, r3
 8000d3a:	bf08      	it	eq
 8000d3c:	4290      	cmpeq	r0, r2
 8000d3e:	bf2c      	ite	cs
 8000d40:	17d8      	asrcs	r0, r3, #31
 8000d42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d46:	f040 0001 	orr.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d54:	d102      	bne.n	8000d5c <__cmpdf2+0x64>
 8000d56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d5a:	d107      	bne.n	8000d6c <__cmpdf2+0x74>
 8000d5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d64:	d1d6      	bne.n	8000d14 <__cmpdf2+0x1c>
 8000d66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d6a:	d0d3      	beq.n	8000d14 <__cmpdf2+0x1c>
 8000d6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <__aeabi_cdrcmple>:
 8000d74:	4684      	mov	ip, r0
 8000d76:	4610      	mov	r0, r2
 8000d78:	4662      	mov	r2, ip
 8000d7a:	468c      	mov	ip, r1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4663      	mov	r3, ip
 8000d80:	e000      	b.n	8000d84 <__aeabi_cdcmpeq>
 8000d82:	bf00      	nop

08000d84 <__aeabi_cdcmpeq>:
 8000d84:	b501      	push	{r0, lr}
 8000d86:	f7ff ffb7 	bl	8000cf8 <__cmpdf2>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	bf48      	it	mi
 8000d8e:	f110 0f00 	cmnmi.w	r0, #0
 8000d92:	bd01      	pop	{r0, pc}

08000d94 <__aeabi_dcmpeq>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff fff4 	bl	8000d84 <__aeabi_cdcmpeq>
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2001      	moveq	r0, #1
 8000da0:	2000      	movne	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_dcmplt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffea 	bl	8000d84 <__aeabi_cdcmpeq>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_dcmple>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffe0 	bl	8000d84 <__aeabi_cdcmpeq>
 8000dc4:	bf94      	ite	ls
 8000dc6:	2001      	movls	r0, #1
 8000dc8:	2000      	movhi	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_dcmpge>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff ffce 	bl	8000d74 <__aeabi_cdrcmple>
 8000dd8:	bf94      	ite	ls
 8000dda:	2001      	movls	r0, #1
 8000ddc:	2000      	movhi	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <__aeabi_dcmpgt>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff ffc4 	bl	8000d74 <__aeabi_cdrcmple>
 8000dec:	bf34      	ite	cc
 8000dee:	2001      	movcc	r0, #1
 8000df0:	2000      	movcs	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_d2uiz>:
 8000df8:	004a      	lsls	r2, r1, #1
 8000dfa:	d211      	bcs.n	8000e20 <__aeabi_d2uiz+0x28>
 8000dfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e00:	d211      	bcs.n	8000e26 <__aeabi_d2uiz+0x2e>
 8000e02:	d50d      	bpl.n	8000e20 <__aeabi_d2uiz+0x28>
 8000e04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e0c:	d40e      	bmi.n	8000e2c <__aeabi_d2uiz+0x34>
 8000e0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e1e:	4770      	bx	lr
 8000e20:	f04f 0000 	mov.w	r0, #0
 8000e24:	4770      	bx	lr
 8000e26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e2a:	d102      	bne.n	8000e32 <__aeabi_d2uiz+0x3a>
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	4770      	bx	lr
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	4770      	bx	lr

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000e3c:	f000 fc5e 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f9a6 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f000 fa38 	bl	80012b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e48:	f000 fa0c 	bl	8001264 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  //long long DataBuffer=0;
  //--------------------------------------------------------------------------------
  while (1)
  {
	  ButtonMatrixUpdate();
 8000e4c:	f000 faec 	bl	8001428 <ButtonMatrixUpdate>
	  check();
 8000e50:	f000 f812 	bl	8000e78 <check>
	  if (SwitchState[0] == 0 && SwitchState[1] != 0)
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <main+0x38>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f7      	bne.n	8000e4c <main+0x14>
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <main+0x38>)
 8000e5e:	885b      	ldrh	r3, [r3, #2]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f3      	beq.n	8000e4c <main+0x14>
	 	  {
	 		  SwitchState[1] = SwitchState[0];
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <main+0x38>)
 8000e66:	881a      	ldrh	r2, [r3, #0]
 8000e68:	4b01      	ldr	r3, [pc, #4]	; (8000e70 <main+0x38>)
 8000e6a:	805a      	strh	r2, [r3, #2]
  {
 8000e6c:	e7ee      	b.n	8000e4c <main+0x14>
 8000e6e:	bf00      	nop
 8000e70:	20000074 	.word	0x20000074
 8000e74:	00000000 	.word	0x00000000

08000e78 <check>:
    /* USER CODE END WHILE */
  }
}
    /* USER CODE BEGIN 3 */
void check()
{
 8000e78:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000e7c:	af00      	add	r7, sp, #0
  SwitchState[0] = ButtonMatrixState;
 8000e7e:	4b90      	ldr	r3, [pc, #576]	; (80010c0 <check+0x248>)
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	4b90      	ldr	r3, [pc, #576]	; (80010c4 <check+0x24c>)
 8000e84:	801a      	strh	r2, [r3, #0]
  //Press = Low , No = High
  if(SwitchState[0] != 0 && SwitchState[1] == 0)
 8000e86:	4b8f      	ldr	r3, [pc, #572]	; (80010c4 <check+0x24c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 816d 	beq.w	800116a <check+0x2f2>
 8000e90:	4b8c      	ldr	r3, [pc, #560]	; (80010c4 <check+0x24c>)
 8000e92:	885b      	ldrh	r3, [r3, #2]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f040 8168 	bne.w	800116a <check+0x2f2>
  {
	  DataBuffer = DataBuffer * 10;
 8000e9a:	4b8b      	ldr	r3, [pc, #556]	; (80010c8 <check+0x250>)
 8000e9c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000ea0:	46ab      	mov	fp, r5
 8000ea2:	46b4      	mov	ip, r6
 8000ea4:	f04f 0100 	mov.w	r1, #0
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8000eb0:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8000eb4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8000eb8:	468b      	mov	fp, r1
 8000eba:	4694      	mov	ip, r2
 8000ebc:	eb1b 0b05 	adds.w	fp, fp, r5
 8000ec0:	eb4c 0c06 	adc.w	ip, ip, r6
 8000ec4:	eb1b 030b 	adds.w	r3, fp, fp
 8000ec8:	eb4c 040c 	adc.w	r4, ip, ip
 8000ecc:	469b      	mov	fp, r3
 8000ece:	46a4      	mov	ip, r4
 8000ed0:	465b      	mov	r3, fp
 8000ed2:	4664      	mov	r4, ip
 8000ed4:	4a7c      	ldr	r2, [pc, #496]	; (80010c8 <check+0x250>)
 8000ed6:	e9c2 3400 	strd	r3, r4, [r2]

	  if(ButtonMatrixState == 1)
 8000eda:	4b79      	ldr	r3, [pc, #484]	; (80010c0 <check+0x248>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d10e      	bne.n	8000f00 <check+0x88>
	  {
	   DataBuffer += 7;
 8000ee2:	4b79      	ldr	r3, [pc, #484]	; (80010c8 <check+0x250>)
 8000ee4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000ee8:	1dcb      	adds	r3, r1, #7
 8000eea:	f142 0400 	adc.w	r4, r2, #0
 8000eee:	4a76      	ldr	r2, [pc, #472]	; (80010c8 <check+0x250>)
 8000ef0:	e9c2 3400 	strd	r3, r4, [r2]
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	4874      	ldr	r0, [pc, #464]	; (80010cc <check+0x254>)
 8000efa:	f000 fef1 	bl	8001ce0 <HAL_GPIO_WritePin>
 8000efe:	e130      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 2)
 8000f00:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <check+0x248>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d10f      	bne.n	8000f28 <check+0xb0>
	  {
		DataBuffer += 8;
 8000f08:	4b6f      	ldr	r3, [pc, #444]	; (80010c8 <check+0x250>)
 8000f0a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000f0e:	f111 0308 	adds.w	r3, r1, #8
 8000f12:	f142 0400 	adc.w	r4, r2, #0
 8000f16:	4a6c      	ldr	r2, [pc, #432]	; (80010c8 <check+0x250>)
 8000f18:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2120      	movs	r1, #32
 8000f20:	486a      	ldr	r0, [pc, #424]	; (80010cc <check+0x254>)
 8000f22:	f000 fedd 	bl	8001ce0 <HAL_GPIO_WritePin>
 8000f26:	e11c      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 4)
 8000f28:	4b65      	ldr	r3, [pc, #404]	; (80010c0 <check+0x248>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d10f      	bne.n	8000f50 <check+0xd8>
	  {
	   DataBuffer += 9;
 8000f30:	4b65      	ldr	r3, [pc, #404]	; (80010c8 <check+0x250>)
 8000f32:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000f36:	f111 0309 	adds.w	r3, r1, #9
 8000f3a:	f142 0400 	adc.w	r4, r2, #0
 8000f3e:	4a62      	ldr	r2, [pc, #392]	; (80010c8 <check+0x250>)
 8000f40:	e9c2 3400 	strd	r3, r4, [r2]
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2120      	movs	r1, #32
 8000f48:	4860      	ldr	r0, [pc, #384]	; (80010cc <check+0x254>)
 8000f4a:	f000 fec9 	bl	8001ce0 <HAL_GPIO_WritePin>
 8000f4e:	e108      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 16)
 8000f50:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <check+0x248>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d109      	bne.n	8000f6c <check+0xf4>
	  {
		DataBuffer += 4;
 8000f58:	4b5b      	ldr	r3, [pc, #364]	; (80010c8 <check+0x250>)
 8000f5a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000f5e:	1d0b      	adds	r3, r1, #4
 8000f60:	f142 0400 	adc.w	r4, r2, #0
 8000f64:	4a58      	ldr	r2, [pc, #352]	; (80010c8 <check+0x250>)
 8000f66:	e9c2 3400 	strd	r3, r4, [r2]
 8000f6a:	e0fa      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 32)
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <check+0x248>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	2b20      	cmp	r3, #32
 8000f72:	d10e      	bne.n	8000f92 <check+0x11a>
	  {
		DataBuffer += 5;
 8000f74:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <check+0x250>)
 8000f76:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000f7a:	1d4b      	adds	r3, r1, #5
 8000f7c:	f142 0400 	adc.w	r4, r2, #0
 8000f80:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <check+0x250>)
 8000f82:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4850      	ldr	r0, [pc, #320]	; (80010cc <check+0x254>)
 8000f8c:	f000 fea8 	bl	8001ce0 <HAL_GPIO_WritePin>
 8000f90:	e0e7      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 64)
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <check+0x248>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	2b40      	cmp	r3, #64	; 0x40
 8000f98:	d10e      	bne.n	8000fb8 <check+0x140>
	  {
		DataBuffer += 6;
 8000f9a:	4b4b      	ldr	r3, [pc, #300]	; (80010c8 <check+0x250>)
 8000f9c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000fa0:	1d8b      	adds	r3, r1, #6
 8000fa2:	f142 0400 	adc.w	r4, r2, #0
 8000fa6:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <check+0x250>)
 8000fa8:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2120      	movs	r1, #32
 8000fb0:	4846      	ldr	r0, [pc, #280]	; (80010cc <check+0x254>)
 8000fb2:	f000 fe95 	bl	8001ce0 <HAL_GPIO_WritePin>
 8000fb6:	e0d4      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 256)
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <check+0x248>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc0:	d10e      	bne.n	8000fe0 <check+0x168>
	  {
		DataBuffer += 1;
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <check+0x250>)
 8000fc4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000fc8:	1c4b      	adds	r3, r1, #1
 8000fca:	f142 0400 	adc.w	r4, r2, #0
 8000fce:	4a3e      	ldr	r2, [pc, #248]	; (80010c8 <check+0x250>)
 8000fd0:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	483c      	ldr	r0, [pc, #240]	; (80010cc <check+0x254>)
 8000fda:	f000 fe81 	bl	8001ce0 <HAL_GPIO_WritePin>
 8000fde:	e0c0      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 512)
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <check+0x248>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe8:	d10e      	bne.n	8001008 <check+0x190>
	  {
		DataBuffer += 2;
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <check+0x250>)
 8000fec:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000ff0:	1c8b      	adds	r3, r1, #2
 8000ff2:	f142 0400 	adc.w	r4, r2, #0
 8000ff6:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <check+0x250>)
 8000ff8:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2120      	movs	r1, #32
 8001000:	4832      	ldr	r0, [pc, #200]	; (80010cc <check+0x254>)
 8001002:	f000 fe6d 	bl	8001ce0 <HAL_GPIO_WritePin>
 8001006:	e0ac      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 1024)
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <check+0x248>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001010:	d10e      	bne.n	8001030 <check+0x1b8>
	  {
		DataBuffer += 3;
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <check+0x250>)
 8001014:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001018:	1ccb      	adds	r3, r1, #3
 800101a:	f142 0400 	adc.w	r4, r2, #0
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <check+0x250>)
 8001020:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2120      	movs	r1, #32
 8001028:	4828      	ldr	r0, [pc, #160]	; (80010cc <check+0x254>)
 800102a:	f000 fe59 	bl	8001ce0 <HAL_GPIO_WritePin>
 800102e:	e098      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState == 4096)
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <check+0x248>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001038:	d10b      	bne.n	8001052 <check+0x1da>
	  {
		DataBuffer += 0;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <check+0x250>)
 800103c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <check+0x250>)
 8001042:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <check+0x254>)
 800104c:	f000 fe48 	bl	8001ce0 <HAL_GPIO_WritePin>
 8001050:	e087      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState ==8 ) //clear
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <check+0x248>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	2b08      	cmp	r3, #8
 8001058:	d10c      	bne.n	8001074 <check+0x1fc>
	  {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2120      	movs	r1, #32
 800105e:	481b      	ldr	r0, [pc, #108]	; (80010cc <check+0x254>)
 8001060:	f000 fe3e 	bl	8001ce0 <HAL_GPIO_WritePin>
		DataBuffer = 0;
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <check+0x250>)
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	f04f 0400 	mov.w	r4, #0
 800106e:	e9c2 3400 	strd	r3, r4, [r2]
 8001072:	e076      	b.n	8001162 <check+0x2ea>
	  }
	  else if(ButtonMatrixState ==128 ) //backspace
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <check+0x248>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	2b80      	cmp	r3, #128	; 0x80
 800107a:	d129      	bne.n	80010d0 <check+0x258>
	  {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2120      	movs	r1, #32
 8001080:	4812      	ldr	r0, [pc, #72]	; (80010cc <check+0x254>)
 8001082:	f000 fe2d 	bl	8001ce0 <HAL_GPIO_WritePin>
		DataBuffer = DataBuffer * 0.010;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <check+0x250>)
 8001088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f7ff fa30 	bl	80004f4 <__aeabi_l2d>
 8001094:	a308      	add	r3, pc, #32	; (adr r3, 80010b8 <check+0x240>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fa59 	bl	8000550 <__aeabi_dmul>
 800109e:	4603      	mov	r3, r0
 80010a0:	460c      	mov	r4, r1
 80010a2:	4618      	mov	r0, r3
 80010a4:	4621      	mov	r1, r4
 80010a6:	f7ff fc7d 	bl	80009a4 <__aeabi_d2lz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <check+0x250>)
 80010b0:	e9c2 3400 	strd	r3, r4, [r2]
 80010b4:	e055      	b.n	8001162 <check+0x2ea>
 80010b6:	bf00      	nop
 80010b8:	47ae147b 	.word	0x47ae147b
 80010bc:	3f847ae1 	.word	0x3f847ae1
 80010c0:	2000005c 	.word	0x2000005c
 80010c4:	20000074 	.word	0x20000074
 80010c8:	20000068 	.word	0x20000068
 80010cc:	40020000 	.word	0x40020000

	  }
	  else if(ButtonMatrixState ==32768) //ok
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <check+0x308>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010d8:	d12c      	bne.n	8001134 <check+0x2bc>
	  {
	   DataBuffer = DataBuffer * 0.10;
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <check+0x30c>)
 80010dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010e0:	4618      	mov	r0, r3
 80010e2:	4621      	mov	r1, r4
 80010e4:	f7ff fa06 	bl	80004f4 <__aeabi_l2d>
 80010e8:	a321      	add	r3, pc, #132	; (adr r3, 8001170 <check+0x2f8>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fa2f 	bl	8000550 <__aeabi_dmul>
 80010f2:	4603      	mov	r3, r0
 80010f4:	460c      	mov	r4, r1
 80010f6:	4618      	mov	r0, r3
 80010f8:	4621      	mov	r1, r4
 80010fa:	f7ff fc53 	bl	80009a4 <__aeabi_d2lz>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <check+0x30c>)
 8001104:	e9c2 3400 	strd	r3, r4, [r2]
	   if(DataBuffer ==62340500022)
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <check+0x30c>)
 800110a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800110e:	a21a      	add	r2, pc, #104	; (adr r2, 8001178 <check+0x300>)
 8001110:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001114:	4294      	cmp	r4, r2
 8001116:	bf08      	it	eq
 8001118:	428b      	cmpeq	r3, r1
 800111a:	d105      	bne.n	8001128 <check+0x2b0>
	   {
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2120      	movs	r1, #32
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <check+0x310>)
 8001122:	f000 fddd 	bl	8001ce0 <HAL_GPIO_WritePin>
 8001126:	e01c      	b.n	8001162 <check+0x2ea>
	   }
	   else
	   {
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
 800112c:	4816      	ldr	r0, [pc, #88]	; (8001188 <check+0x310>)
 800112e:	f000 fdd7 	bl	8001ce0 <HAL_GPIO_WritePin>
 8001132:	e016      	b.n	8001162 <check+0x2ea>
	   }
	  }
	  else
	  {
	   DataBuffer = DataBuffer * 0.10;
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <check+0x30c>)
 8001136:	e9d3 3400 	ldrd	r3, r4, [r3]
 800113a:	4618      	mov	r0, r3
 800113c:	4621      	mov	r1, r4
 800113e:	f7ff f9d9 	bl	80004f4 <__aeabi_l2d>
 8001142:	a30b      	add	r3, pc, #44	; (adr r3, 8001170 <check+0x2f8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa02 	bl	8000550 <__aeabi_dmul>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	4618      	mov	r0, r3
 8001152:	4621      	mov	r1, r4
 8001154:	f7ff fc26 	bl	80009a4 <__aeabi_d2lz>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <check+0x30c>)
 800115e:	e9c2 3400 	strd	r3, r4, [r2]
	  }
	  SwitchState[1] = SwitchState[0];
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <check+0x314>)
 8001164:	881a      	ldrh	r2, [r3, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <check+0x314>)
 8001168:	805a      	strh	r2, [r3, #2]
  }
 }
 800116a:	bf00      	nop
 800116c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001170:	9999999a 	.word	0x9999999a
 8001174:	3fb99999 	.word	0x3fb99999
 8001178:	83c88a36 	.word	0x83c88a36
 800117c:	0000000e 	.word	0x0000000e
 8001180:	2000005c 	.word	0x2000005c
 8001184:	20000068 	.word	0x20000068
 8001188:	40020000 	.word	0x40020000
 800118c:	20000074 	.word	0x20000074

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	; 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	; 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fe08 	bl	8002db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <SystemClock_Config+0xcc>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <SystemClock_Config+0xcc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <SystemClock_Config+0xd0>)
 80011da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001200:	2310      	movs	r3, #16
 8001202:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001204:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800120a:	2304      	movs	r3, #4
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800120e:	2304      	movs	r3, #4
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fd7c 	bl	8001d14 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001222:	f000 f98d 	bl	8001540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2302      	movs	r3, #2
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2102      	movs	r1, #2
 8001242:	4618      	mov	r0, r3
 8001244:	f000 ffd6 	bl	80021f4 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800124e:	f000 f977 	bl	8001540 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_USART2_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800129c:	f001 f99c 	bl	80025d8 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 f94b 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000078 	.word	0x20000078
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b50      	ldr	r3, [pc, #320]	; (8001414 <MX_GPIO_Init+0x15c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <MX_GPIO_Init+0x15c>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <MX_GPIO_Init+0x15c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <MX_GPIO_Init+0x15c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a48      	ldr	r2, [pc, #288]	; (8001414 <MX_GPIO_Init+0x15c>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <MX_GPIO_Init+0x15c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <MX_GPIO_Init+0x15c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a41      	ldr	r2, [pc, #260]	; (8001414 <MX_GPIO_Init+0x15c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <MX_GPIO_Init+0x15c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_GPIO_Init+0x15c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a3a      	ldr	r2, [pc, #232]	; (8001414 <MX_GPIO_Init+0x15c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <MX_GPIO_Init+0x15c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	4835      	ldr	r0, [pc, #212]	; (8001418 <MX_GPIO_Init+0x160>)
 8001344:	f000 fccc 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800134e:	4832      	ldr	r0, [pc, #200]	; (8001418 <MX_GPIO_Init+0x160>)
 8001350:	f000 fcc6 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4830      	ldr	r0, [pc, #192]	; (800141c <MX_GPIO_Init+0x164>)
 800135a:	f000 fcc1 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2140      	movs	r1, #64	; 0x40
 8001362:	482f      	ldr	r0, [pc, #188]	; (8001420 <MX_GPIO_Init+0x168>)
 8001364:	f000 fcbc 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <MX_GPIO_Init+0x16c>)
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4827      	ldr	r0, [pc, #156]	; (800141c <MX_GPIO_Init+0x164>)
 800137e:	f000 fb15 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 8001382:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	481f      	ldr	r0, [pc, #124]	; (8001418 <MX_GPIO_Init+0x160>)
 800139c:	f000 fb06 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4819      	ldr	r0, [pc, #100]	; (800141c <MX_GPIO_Init+0x164>)
 80013b8:	f000 faf8 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <MX_GPIO_Init+0x160>)
 80013d2:	f000 faeb 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013d6:	2338      	movs	r3, #56	; 0x38
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013de:	2301      	movs	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_GPIO_Init+0x168>)
 80013ea:	f000 fadf 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ee:	2340      	movs	r3, #64	; 0x40
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_GPIO_Init+0x168>)
 8001406:	f000 fad1 	bl	80019ac <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020800 	.word	0x40020800
 8001420:	40020400 	.word	0x40020400
 8001424:	10210000 	.word	0x10210000

08001428 <ButtonMatrixUpdate>:
//GPIO_PinState SwitchState[2];
//long long DataBuffer=0;
int mod =0;
//long long Show= 62340500022;
void ButtonMatrixUpdate()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - ButtonMatrixTimeStamp >= 20)
 800142e:	f000 f9cb 	bl	80017c8 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	4b3d      	ldr	r3, [pc, #244]	; (800152c <ButtonMatrixUpdate+0x104>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b13      	cmp	r3, #19
 800143c:	d971      	bls.n	8001522 <ButtonMatrixUpdate+0xfa>
	{
		ButtonMatrixTimeStamp = HAL_GetTick();
 800143e:	f000 f9c3 	bl	80017c8 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <ButtonMatrixUpdate+0x104>)
 8001446:	601a      	str	r2, [r3, #0]
	         //Press = Low , No = High
		for(int i = 0; i < 4; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	e037      	b.n	80014be <ButtonMatrixUpdate+0x96>
		{
			GPIO_PinState PinState = HAL_GPIO_ReadPin(ButtonMatrixPort[i], ButtonMatrixPin[i]);
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <ButtonMatrixUpdate+0x108>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001456:	4a37      	ldr	r2, [pc, #220]	; (8001534 <ButtonMatrixUpdate+0x10c>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145e:	4619      	mov	r1, r3
 8001460:	f000 fc26 	bl	8001cb0 <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	707b      	strb	r3, [r7, #1]
			if(PinState == GPIO_PIN_RESET) // Button is Pressed
 8001468:	787b      	ldrb	r3, [r7, #1]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d111      	bne.n	8001492 <ButtonMatrixUpdate+0x6a>
			{
				ButtonMatrixState |= (uint16_t)1 << (i + ButtonMatrixLine * 4);
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <ButtonMatrixUpdate+0x110>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	009a      	lsls	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	2201      	movs	r2, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <ButtonMatrixUpdate+0x114>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <ButtonMatrixUpdate+0x114>)
 800148e:	801a      	strh	r2, [r3, #0]
 8001490:	e012      	b.n	80014b8 <ButtonMatrixUpdate+0x90>
				//check();
			}
			else
			{
				ButtonMatrixState &= ~((uint16_t)1 << (i + ButtonMatrixLine * 4));
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <ButtonMatrixUpdate+0x110>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	009a      	lsls	r2, r3, #2
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	2201      	movs	r2, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <ButtonMatrixUpdate+0x114>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4013      	ands	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <ButtonMatrixUpdate+0x114>)
 80014b6:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < 4; i++)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3301      	adds	r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	ddc4      	ble.n	800144e <ButtonMatrixUpdate+0x26>

			}
		}
		uint8_t NowOutputPin = ButtonMatrixLine + 4;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <ButtonMatrixUpdate+0x110>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3304      	adds	r3, #4
 80014cc:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ButtonMatrixPort[NowOutputPin], ButtonMatrixPin[NowOutputPin], GPIO_PIN_SET);
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	4a17      	ldr	r2, [pc, #92]	; (8001530 <ButtonMatrixUpdate+0x108>)
 80014d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	4a16      	ldr	r2, [pc, #88]	; (8001534 <ButtonMatrixUpdate+0x10c>)
 80014da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014de:	2201      	movs	r2, #1
 80014e0:	4619      	mov	r1, r3
 80014e2:	f000 fbfd 	bl	8001ce0 <HAL_GPIO_WritePin>
		ButtonMatrixLine = (ButtonMatrixLine + 1) % 4;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <ButtonMatrixUpdate+0x110>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	425a      	negs	r2, r3
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	bf58      	it	pl
 80014f8:	4253      	negpl	r3, r2
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <ButtonMatrixUpdate+0x110>)
 80014fe:	801a      	strh	r2, [r3, #0]

		uint8_t NextOutputPin = ButtonMatrixLine + 4;
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <ButtonMatrixUpdate+0x110>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3304      	adds	r3, #4
 8001508:	70bb      	strb	r3, [r7, #2]
		HAL_GPIO_WritePin(ButtonMatrixPort[NextOutputPin], ButtonMatrixPin[NextOutputPin], GPIO_PIN_RESET);
 800150a:	78bb      	ldrb	r3, [r7, #2]
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <ButtonMatrixUpdate+0x108>)
 800150e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001512:	78bb      	ldrb	r3, [r7, #2]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <ButtonMatrixUpdate+0x10c>)
 8001516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	f000 fbdf 	bl	8001ce0 <HAL_GPIO_WritePin>
		//SwitchState[0] = HAL_GPIO_ReadPin(ButtonMatrixPort[NowOutputPin], ButtonMatrixPin[NowOutputPin]);
	}
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000060 	.word	0x20000060
 8001530:	20000000 	.word	0x20000000
 8001534:	20000020 	.word	0x20000020
 8001538:	20000070 	.word	0x20000070
 800153c:	2000005c 	.word	0x2000005c

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x6>

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001586:	2007      	movs	r0, #7
 8001588:	f000 f9dc 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_UART_MspInit+0x8c>)
 800160e:	f000 f9cd 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f894 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <SystemInit+0x28>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <SystemInit+0x28>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SystemInit+0x28>)
 8001692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001696:	609a      	str	r2, [r3, #8]
#endif
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ae:	e003      	b.n	80016b8 <LoopCopyDataInit>

080016b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016b6:	3104      	adds	r1, #4

080016b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016c0:	d3f6      	bcc.n	80016b0 <CopyDataInit>
  ldr  r2, =_sbss
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016c4:	e002      	b.n	80016cc <LoopFillZerobss>

080016c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016c8:	f842 3b04 	str.w	r3, [r2], #4

080016cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016d0:	d3f9      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016d2:	f7ff ffd3 	bl	800167c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f001 fb49 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff fbad 	bl	8000e38 <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016e4:	08002e04 	.word	0x08002e04
  ldr  r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016ec:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 80016f0:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 80016f4:	200000bc 	.word	0x200000bc

080016f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f90d 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff ff0a 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f917 	bl	8001992 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 f8ed 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000030 	.word	0x20000030
 8001798:	20000038 	.word	0x20000038
 800179c:	20000034 	.word	0x20000034

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000038 	.word	0x20000038
 80017c4:	200000b8 	.word	0x200000b8

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200000b8 	.word	0x200000b8

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff47 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff5c 	bl	8001828 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffb0 	bl	8001900 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e159      	b.n	8001c7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8148 	bne.w	8001c76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00b      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0xfc>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a2 	beq.w	8001c76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <HAL_GPIO_Init+0x2e4>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a55      	ldr	r2, [pc, #340]	; (8001c90 <HAL_GPIO_Init+0x2e4>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_GPIO_Init+0x2e4>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_GPIO_Init+0x2e8>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a48      	ldr	r2, [pc, #288]	; (8001c98 <HAL_GPIO_Init+0x2ec>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x202>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a47      	ldr	r2, [pc, #284]	; (8001c9c <HAL_GPIO_Init+0x2f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x1fe>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <HAL_GPIO_Init+0x2f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x1fa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <HAL_GPIO_Init+0x2f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x1f6>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a44      	ldr	r2, [pc, #272]	; (8001ca8 <HAL_GPIO_Init+0x2fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x1f2>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e008      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e004      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f002 0203 	and.w	r2, r2, #3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc0:	4934      	ldr	r1, [pc, #208]	; (8001c94 <HAL_GPIO_Init+0x2e8>)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf2:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	f67f aea2 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3724      	adds	r7, #36	; 0x24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e25b      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d075      	beq.n	8001e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	4ba3      	ldr	r3, [pc, #652]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d00c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4ba0      	ldr	r3, [pc, #640]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d112      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4b9d      	ldr	r3, [pc, #628]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b99      	ldr	r3, [pc, #612]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d05b      	beq.n	8001e1c <HAL_RCC_OscConfig+0x108>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d157      	bne.n	8001e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e236      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x74>
 8001d7a:	4b91      	ldr	r3, [pc, #580]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x98>
 8001d92:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a8a      	ldr	r2, [pc, #552]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a87      	ldr	r2, [pc, #540]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001dac:	4b84      	ldr	r3, [pc, #528]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a83      	ldr	r2, [pc, #524]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a80      	ldr	r2, [pc, #512]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fcfc 	bl	80017c8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fcf8 	bl	80017c8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1fb      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xc0>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fce8 	bl	80017c8 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fce4 	bl	80017c8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1e7      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	4b6c      	ldr	r3, [pc, #432]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0xe8>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e1bb      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4952      	ldr	r1, [pc, #328]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	e03a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e84:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <HAL_RCC_OscConfig+0x2b0>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fc9d 	bl	80017c8 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff fc99 	bl	80017c8 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e19c      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4940      	ldr	r1, [pc, #256]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0x2b0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fc7c 	bl	80017c8 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fc78 	bl	80017c8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e17b      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d030      	beq.n	8001f60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_OscConfig+0x2b4>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fc5c 	bl	80017c8 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fc58 	bl	80017c8 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e15b      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x200>
 8001f32:	e015      	b.n	8001f60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x2b4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fc45 	bl	80017c8 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff fc41 	bl	80017c8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e144      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a0 	beq.w	80020ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x2b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d121      	bne.n	8001fee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_RCC_OscConfig+0x2b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_RCC_OscConfig+0x2b8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fc07 	bl	80017c8 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e011      	b.n	8001fe2 <HAL_RCC_OscConfig+0x2ce>
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	42470000 	.word	0x42470000
 8001fc8:	42470e80 	.word	0x42470e80
 8001fcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7ff fbfa 	bl	80017c8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0fd      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <HAL_RCC_OscConfig+0x4d4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_OscConfig+0x2f0>
 8001ff6:	4b7d      	ldr	r3, [pc, #500]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a7c      	ldr	r2, [pc, #496]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	e01c      	b.n	800203e <HAL_RCC_OscConfig+0x32a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_OscConfig+0x312>
 800200c:	4b77      	ldr	r3, [pc, #476]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a76      	ldr	r2, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b74      	ldr	r3, [pc, #464]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a73      	ldr	r2, [pc, #460]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x32a>
 8002026:	4b71      	ldr	r3, [pc, #452]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a70      	ldr	r2, [pc, #448]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
 8002032:	4b6e      	ldr	r3, [pc, #440]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a6d      	ldr	r2, [pc, #436]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d015      	beq.n	8002072 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fbbf 	bl	80017c8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fbbb 	bl	80017c8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0bc      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	4b61      	ldr	r3, [pc, #388]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ee      	beq.n	800204e <HAL_RCC_OscConfig+0x33a>
 8002070:	e014      	b.n	800209c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff fba9 	bl	80017c8 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fba5 	bl	80017c8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0a6      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	4b56      	ldr	r3, [pc, #344]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b52      	ldr	r3, [pc, #328]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8092 	beq.w	80021dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d05c      	beq.n	800217e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d141      	bne.n	8002150 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <HAL_RCC_OscConfig+0x4dc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fb79 	bl	80017c8 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fb75 	bl	80017c8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e078      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ec:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	019b      	lsls	r3, r3, #6
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	3b01      	subs	r3, #1
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	061b      	lsls	r3, r3, #24
 800211c:	4933      	ldr	r1, [pc, #204]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002122:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_RCC_OscConfig+0x4dc>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fb4e 	bl	80017c8 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff fb4a 	bl	80017c8 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e04d      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x41c>
 800214e:	e045      	b.n	80021dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x4dc>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff fb37 	bl	80017c8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff fb33 	bl	80017c8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e036      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x44a>
 800217c:	e02e      	b.n	80021dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e029      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_RCC_OscConfig+0x4d8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	429a      	cmp	r2, r3
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d115      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40007000 	.word	0x40007000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	42470060 	.word	0x42470060

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0cc      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d90c      	bls.n	8002230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	494d      	ldr	r1, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d044      	beq.n	8002314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e067      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4934      	ldr	r1, [pc, #208]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7ff fa70 	bl	80017c8 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7ff fa6c 	bl	80017c8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e04f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d20c      	bcs.n	800233c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e032      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4916      	ldr	r1, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237a:	f000 f821 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800237e:	4601      	mov	r1, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	fa21 f303 	lsr.w	r3, r1, r3
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f9d0 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023c00 	.word	0x40023c00
 80023b0:	40023800 	.word	0x40023800
 80023b4:	08002ddc 	.word	0x08002ddc
 80023b8:	20000030 	.word	0x20000030
 80023bc:	20000034 	.word	0x20000034

080023c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d007      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x32>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d008      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x38>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 80b4 	bne.w	8002554 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023ee:	60bb      	str	r3, [r7, #8]
       break;
 80023f0:	e0b3      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f2:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80023f4:	60bb      	str	r3, [r7, #8]
      break;
 80023f6:	e0b0      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002400:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002402:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04a      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	f04f 0400 	mov.w	r4, #0
 8002418:	f240 11ff 	movw	r1, #511	; 0x1ff
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	ea03 0501 	and.w	r5, r3, r1
 8002424:	ea04 0602 	and.w	r6, r4, r2
 8002428:	4629      	mov	r1, r5
 800242a:	4632      	mov	r2, r6
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	0154      	lsls	r4, r2, #5
 8002436:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800243a:	014b      	lsls	r3, r1, #5
 800243c:	4619      	mov	r1, r3
 800243e:	4622      	mov	r2, r4
 8002440:	1b49      	subs	r1, r1, r5
 8002442:	eb62 0206 	sbc.w	r2, r2, r6
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	f04f 0400 	mov.w	r4, #0
 800244e:	0194      	lsls	r4, r2, #6
 8002450:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002454:	018b      	lsls	r3, r1, #6
 8002456:	1a5b      	subs	r3, r3, r1
 8002458:	eb64 0402 	sbc.w	r4, r4, r2
 800245c:	f04f 0100 	mov.w	r1, #0
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	00e2      	lsls	r2, r4, #3
 8002466:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800246a:	00d9      	lsls	r1, r3, #3
 800246c:	460b      	mov	r3, r1
 800246e:	4614      	mov	r4, r2
 8002470:	195b      	adds	r3, r3, r5
 8002472:	eb44 0406 	adc.w	r4, r4, r6
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	0262      	lsls	r2, r4, #9
 8002480:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002484:	0259      	lsls	r1, r3, #9
 8002486:	460b      	mov	r3, r1
 8002488:	4614      	mov	r4, r2
 800248a:	4618      	mov	r0, r3
 800248c:	4621      	mov	r1, r4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f04f 0400 	mov.w	r4, #0
 8002494:	461a      	mov	r2, r3
 8002496:	4623      	mov	r3, r4
 8002498:	f7fe fa6c 	bl	8000974 <__aeabi_uldivmod>
 800249c:	4603      	mov	r3, r0
 800249e:	460c      	mov	r4, r1
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e049      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a4:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	ea03 0501 	and.w	r5, r3, r1
 80024ba:	ea04 0602 	and.w	r6, r4, r2
 80024be:	4629      	mov	r1, r5
 80024c0:	4632      	mov	r2, r6
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	f04f 0400 	mov.w	r4, #0
 80024ca:	0154      	lsls	r4, r2, #5
 80024cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024d0:	014b      	lsls	r3, r1, #5
 80024d2:	4619      	mov	r1, r3
 80024d4:	4622      	mov	r2, r4
 80024d6:	1b49      	subs	r1, r1, r5
 80024d8:	eb62 0206 	sbc.w	r2, r2, r6
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	f04f 0400 	mov.w	r4, #0
 80024e4:	0194      	lsls	r4, r2, #6
 80024e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024ea:	018b      	lsls	r3, r1, #6
 80024ec:	1a5b      	subs	r3, r3, r1
 80024ee:	eb64 0402 	sbc.w	r4, r4, r2
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	00e2      	lsls	r2, r4, #3
 80024fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002500:	00d9      	lsls	r1, r3, #3
 8002502:	460b      	mov	r3, r1
 8002504:	4614      	mov	r4, r2
 8002506:	195b      	adds	r3, r3, r5
 8002508:	eb44 0406 	adc.w	r4, r4, r6
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	02a2      	lsls	r2, r4, #10
 8002516:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800251a:	0299      	lsls	r1, r3, #10
 800251c:	460b      	mov	r3, r1
 800251e:	4614      	mov	r4, r2
 8002520:	4618      	mov	r0, r3
 8002522:	4621      	mov	r1, r4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f04f 0400 	mov.w	r4, #0
 800252a:	461a      	mov	r2, r3
 800252c:	4623      	mov	r3, r4
 800252e:	f7fe fa21 	bl	8000974 <__aeabi_uldivmod>
 8002532:	4603      	mov	r3, r0
 8002534:	460c      	mov	r4, r1
 8002536:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	3301      	adds	r3, #1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	60bb      	str	r3, [r7, #8]
      break;
 8002552:	e002      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002556:	60bb      	str	r3, [r7, #8]
      break;
 8002558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255a:	68bb      	ldr	r3, [r7, #8]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400
 800256c:	007a1200 	.word	0x007a1200

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCC_GetHCLKFreq+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000030 	.word	0x20000030

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800258c:	f7ff fff0 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002590:	4601      	mov	r1, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4a03      	ldr	r2, [pc, #12]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08002dec 	.word	0x08002dec

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025b4:	f7ff ffdc 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025b8:	4601      	mov	r1, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0b5b      	lsrs	r3, r3, #13
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4a03      	ldr	r2, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08002dec 	.word	0x08002dec

080025d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e03f      	b.n	800266a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe ffca 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f829 	bl	8002674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026b6:	f023 030c 	bic.w	r3, r3, #12
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	f040 818b 	bne.w	80029fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4ac1      	ldr	r2, [pc, #772]	; (80029f0 <UART_SetConfig+0x37c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d005      	beq.n	80026fc <UART_SetConfig+0x88>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4abf      	ldr	r2, [pc, #764]	; (80029f4 <UART_SetConfig+0x380>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f040 80bd 	bne.w	8002876 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026fc:	f7ff ff58 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8002700:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	461d      	mov	r5, r3
 8002706:	f04f 0600 	mov.w	r6, #0
 800270a:	46a8      	mov	r8, r5
 800270c:	46b1      	mov	r9, r6
 800270e:	eb18 0308 	adds.w	r3, r8, r8
 8002712:	eb49 0409 	adc.w	r4, r9, r9
 8002716:	4698      	mov	r8, r3
 8002718:	46a1      	mov	r9, r4
 800271a:	eb18 0805 	adds.w	r8, r8, r5
 800271e:	eb49 0906 	adc.w	r9, r9, r6
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800272e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002732:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002736:	4688      	mov	r8, r1
 8002738:	4691      	mov	r9, r2
 800273a:	eb18 0005 	adds.w	r0, r8, r5
 800273e:	eb49 0106 	adc.w	r1, r9, r6
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	461d      	mov	r5, r3
 8002748:	f04f 0600 	mov.w	r6, #0
 800274c:	196b      	adds	r3, r5, r5
 800274e:	eb46 0406 	adc.w	r4, r6, r6
 8002752:	461a      	mov	r2, r3
 8002754:	4623      	mov	r3, r4
 8002756:	f7fe f90d 	bl	8000974 <__aeabi_uldivmod>
 800275a:	4603      	mov	r3, r0
 800275c:	460c      	mov	r4, r1
 800275e:	461a      	mov	r2, r3
 8002760:	4ba5      	ldr	r3, [pc, #660]	; (80029f8 <UART_SetConfig+0x384>)
 8002762:	fba3 2302 	umull	r2, r3, r3, r2
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	461d      	mov	r5, r3
 8002770:	f04f 0600 	mov.w	r6, #0
 8002774:	46a9      	mov	r9, r5
 8002776:	46b2      	mov	sl, r6
 8002778:	eb19 0309 	adds.w	r3, r9, r9
 800277c:	eb4a 040a 	adc.w	r4, sl, sl
 8002780:	4699      	mov	r9, r3
 8002782:	46a2      	mov	sl, r4
 8002784:	eb19 0905 	adds.w	r9, r9, r5
 8002788:	eb4a 0a06 	adc.w	sl, sl, r6
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002798:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800279c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a0:	4689      	mov	r9, r1
 80027a2:	4692      	mov	sl, r2
 80027a4:	eb19 0005 	adds.w	r0, r9, r5
 80027a8:	eb4a 0106 	adc.w	r1, sl, r6
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	461d      	mov	r5, r3
 80027b2:	f04f 0600 	mov.w	r6, #0
 80027b6:	196b      	adds	r3, r5, r5
 80027b8:	eb46 0406 	adc.w	r4, r6, r6
 80027bc:	461a      	mov	r2, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	f7fe f8d8 	bl	8000974 <__aeabi_uldivmod>
 80027c4:	4603      	mov	r3, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <UART_SetConfig+0x384>)
 80027cc:	fba3 1302 	umull	r1, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	2164      	movs	r1, #100	; 0x64
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	3332      	adds	r3, #50	; 0x32
 80027de:	4a86      	ldr	r2, [pc, #536]	; (80029f8 <UART_SetConfig+0x384>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027ec:	4498      	add	r8, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	461d      	mov	r5, r3
 80027f2:	f04f 0600 	mov.w	r6, #0
 80027f6:	46a9      	mov	r9, r5
 80027f8:	46b2      	mov	sl, r6
 80027fa:	eb19 0309 	adds.w	r3, r9, r9
 80027fe:	eb4a 040a 	adc.w	r4, sl, sl
 8002802:	4699      	mov	r9, r3
 8002804:	46a2      	mov	sl, r4
 8002806:	eb19 0905 	adds.w	r9, r9, r5
 800280a:	eb4a 0a06 	adc.w	sl, sl, r6
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800281a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800281e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002822:	4689      	mov	r9, r1
 8002824:	4692      	mov	sl, r2
 8002826:	eb19 0005 	adds.w	r0, r9, r5
 800282a:	eb4a 0106 	adc.w	r1, sl, r6
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	461d      	mov	r5, r3
 8002834:	f04f 0600 	mov.w	r6, #0
 8002838:	196b      	adds	r3, r5, r5
 800283a:	eb46 0406 	adc.w	r4, r6, r6
 800283e:	461a      	mov	r2, r3
 8002840:	4623      	mov	r3, r4
 8002842:	f7fe f897 	bl	8000974 <__aeabi_uldivmod>
 8002846:	4603      	mov	r3, r0
 8002848:	460c      	mov	r4, r1
 800284a:	461a      	mov	r2, r3
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <UART_SetConfig+0x384>)
 800284e:	fba3 1302 	umull	r1, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2164      	movs	r1, #100	; 0x64
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <UART_SetConfig+0x384>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 0207 	and.w	r2, r3, #7
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4442      	add	r2, r8
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e26f      	b.n	8002d56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002876:	f7ff fe87 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 800287a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	461d      	mov	r5, r3
 8002880:	f04f 0600 	mov.w	r6, #0
 8002884:	46a8      	mov	r8, r5
 8002886:	46b1      	mov	r9, r6
 8002888:	eb18 0308 	adds.w	r3, r8, r8
 800288c:	eb49 0409 	adc.w	r4, r9, r9
 8002890:	4698      	mov	r8, r3
 8002892:	46a1      	mov	r9, r4
 8002894:	eb18 0805 	adds.w	r8, r8, r5
 8002898:	eb49 0906 	adc.w	r9, r9, r6
 800289c:	f04f 0100 	mov.w	r1, #0
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028b0:	4688      	mov	r8, r1
 80028b2:	4691      	mov	r9, r2
 80028b4:	eb18 0005 	adds.w	r0, r8, r5
 80028b8:	eb49 0106 	adc.w	r1, r9, r6
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	461d      	mov	r5, r3
 80028c2:	f04f 0600 	mov.w	r6, #0
 80028c6:	196b      	adds	r3, r5, r5
 80028c8:	eb46 0406 	adc.w	r4, r6, r6
 80028cc:	461a      	mov	r2, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	f7fe f850 	bl	8000974 <__aeabi_uldivmod>
 80028d4:	4603      	mov	r3, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	461a      	mov	r2, r3
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <UART_SetConfig+0x384>)
 80028dc:	fba3 2302 	umull	r2, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	461d      	mov	r5, r3
 80028ea:	f04f 0600 	mov.w	r6, #0
 80028ee:	46a9      	mov	r9, r5
 80028f0:	46b2      	mov	sl, r6
 80028f2:	eb19 0309 	adds.w	r3, r9, r9
 80028f6:	eb4a 040a 	adc.w	r4, sl, sl
 80028fa:	4699      	mov	r9, r3
 80028fc:	46a2      	mov	sl, r4
 80028fe:	eb19 0905 	adds.w	r9, r9, r5
 8002902:	eb4a 0a06 	adc.w	sl, sl, r6
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002912:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002916:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800291a:	4689      	mov	r9, r1
 800291c:	4692      	mov	sl, r2
 800291e:	eb19 0005 	adds.w	r0, r9, r5
 8002922:	eb4a 0106 	adc.w	r1, sl, r6
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	461d      	mov	r5, r3
 800292c:	f04f 0600 	mov.w	r6, #0
 8002930:	196b      	adds	r3, r5, r5
 8002932:	eb46 0406 	adc.w	r4, r6, r6
 8002936:	461a      	mov	r2, r3
 8002938:	4623      	mov	r3, r4
 800293a:	f7fe f81b 	bl	8000974 <__aeabi_uldivmod>
 800293e:	4603      	mov	r3, r0
 8002940:	460c      	mov	r4, r1
 8002942:	461a      	mov	r2, r3
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <UART_SetConfig+0x384>)
 8002946:	fba3 1302 	umull	r1, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2164      	movs	r1, #100	; 0x64
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	3332      	adds	r3, #50	; 0x32
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <UART_SetConfig+0x384>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002966:	4498      	add	r8, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	461d      	mov	r5, r3
 800296c:	f04f 0600 	mov.w	r6, #0
 8002970:	46a9      	mov	r9, r5
 8002972:	46b2      	mov	sl, r6
 8002974:	eb19 0309 	adds.w	r3, r9, r9
 8002978:	eb4a 040a 	adc.w	r4, sl, sl
 800297c:	4699      	mov	r9, r3
 800297e:	46a2      	mov	sl, r4
 8002980:	eb19 0905 	adds.w	r9, r9, r5
 8002984:	eb4a 0a06 	adc.w	sl, sl, r6
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002994:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800299c:	4689      	mov	r9, r1
 800299e:	4692      	mov	sl, r2
 80029a0:	eb19 0005 	adds.w	r0, r9, r5
 80029a4:	eb4a 0106 	adc.w	r1, sl, r6
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	461d      	mov	r5, r3
 80029ae:	f04f 0600 	mov.w	r6, #0
 80029b2:	196b      	adds	r3, r5, r5
 80029b4:	eb46 0406 	adc.w	r4, r6, r6
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	f7fd ffda 	bl	8000974 <__aeabi_uldivmod>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <UART_SetConfig+0x384>)
 80029c8:	fba3 1302 	umull	r1, r3, r3, r2
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	2164      	movs	r1, #100	; 0x64
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	3332      	adds	r3, #50	; 0x32
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <UART_SetConfig+0x384>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	f003 0207 	and.w	r2, r3, #7
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4442      	add	r2, r8
 80029ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029ee:	e1b2      	b.n	8002d56 <UART_SetConfig+0x6e2>
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4ad7      	ldr	r2, [pc, #860]	; (8002d60 <UART_SetConfig+0x6ec>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d005      	beq.n	8002a12 <UART_SetConfig+0x39e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4ad6      	ldr	r2, [pc, #856]	; (8002d64 <UART_SetConfig+0x6f0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	f040 80d1 	bne.w	8002bb4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a12:	f7ff fdcd 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8002a16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	469a      	mov	sl, r3
 8002a1c:	f04f 0b00 	mov.w	fp, #0
 8002a20:	46d0      	mov	r8, sl
 8002a22:	46d9      	mov	r9, fp
 8002a24:	eb18 0308 	adds.w	r3, r8, r8
 8002a28:	eb49 0409 	adc.w	r4, r9, r9
 8002a2c:	4698      	mov	r8, r3
 8002a2e:	46a1      	mov	r9, r4
 8002a30:	eb18 080a 	adds.w	r8, r8, sl
 8002a34:	eb49 090b 	adc.w	r9, r9, fp
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a4c:	4688      	mov	r8, r1
 8002a4e:	4691      	mov	r9, r2
 8002a50:	eb1a 0508 	adds.w	r5, sl, r8
 8002a54:	eb4b 0609 	adc.w	r6, fp, r9
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	0094      	lsls	r4, r2, #2
 8002a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a70:	008b      	lsls	r3, r1, #2
 8002a72:	461a      	mov	r2, r3
 8002a74:	4623      	mov	r3, r4
 8002a76:	4628      	mov	r0, r5
 8002a78:	4631      	mov	r1, r6
 8002a7a:	f7fd ff7b 	bl	8000974 <__aeabi_uldivmod>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	461a      	mov	r2, r3
 8002a84:	4bb8      	ldr	r3, [pc, #736]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	469b      	mov	fp, r3
 8002a94:	f04f 0c00 	mov.w	ip, #0
 8002a98:	46d9      	mov	r9, fp
 8002a9a:	46e2      	mov	sl, ip
 8002a9c:	eb19 0309 	adds.w	r3, r9, r9
 8002aa0:	eb4a 040a 	adc.w	r4, sl, sl
 8002aa4:	4699      	mov	r9, r3
 8002aa6:	46a2      	mov	sl, r4
 8002aa8:	eb19 090b 	adds.w	r9, r9, fp
 8002aac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002abc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ac0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ac4:	4689      	mov	r9, r1
 8002ac6:	4692      	mov	sl, r2
 8002ac8:	eb1b 0509 	adds.w	r5, fp, r9
 8002acc:	eb4c 060a 	adc.w	r6, ip, sl
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	f04f 0400 	mov.w	r4, #0
 8002ae2:	0094      	lsls	r4, r2, #2
 8002ae4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ae8:	008b      	lsls	r3, r1, #2
 8002aea:	461a      	mov	r2, r3
 8002aec:	4623      	mov	r3, r4
 8002aee:	4628      	mov	r0, r5
 8002af0:	4631      	mov	r1, r6
 8002af2:	f7fd ff3f 	bl	8000974 <__aeabi_uldivmod>
 8002af6:	4603      	mov	r3, r0
 8002af8:	460c      	mov	r4, r1
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b9a      	ldr	r3, [pc, #616]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002afe:	fba3 1302 	umull	r1, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2164      	movs	r1, #100	; 0x64
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3332      	adds	r3, #50	; 0x32
 8002b10:	4a95      	ldr	r2, [pc, #596]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1c:	4498      	add	r8, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	469b      	mov	fp, r3
 8002b22:	f04f 0c00 	mov.w	ip, #0
 8002b26:	46d9      	mov	r9, fp
 8002b28:	46e2      	mov	sl, ip
 8002b2a:	eb19 0309 	adds.w	r3, r9, r9
 8002b2e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b32:	4699      	mov	r9, r3
 8002b34:	46a2      	mov	sl, r4
 8002b36:	eb19 090b 	adds.w	r9, r9, fp
 8002b3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b52:	4689      	mov	r9, r1
 8002b54:	4692      	mov	sl, r2
 8002b56:	eb1b 0509 	adds.w	r5, fp, r9
 8002b5a:	eb4c 060a 	adc.w	r6, ip, sl
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4619      	mov	r1, r3
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	f04f 0400 	mov.w	r4, #0
 8002b70:	0094      	lsls	r4, r2, #2
 8002b72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b76:	008b      	lsls	r3, r1, #2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	4631      	mov	r1, r6
 8002b80:	f7fd fef8 	bl	8000974 <__aeabi_uldivmod>
 8002b84:	4603      	mov	r3, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	2164      	movs	r1, #100	; 0x64
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	3332      	adds	r3, #50	; 0x32
 8002b9e:	4a72      	ldr	r2, [pc, #456]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	f003 020f 	and.w	r2, r3, #15
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4442      	add	r2, r8
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	e0d0      	b.n	8002d56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff fce8 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	469a      	mov	sl, r3
 8002bbe:	f04f 0b00 	mov.w	fp, #0
 8002bc2:	46d0      	mov	r8, sl
 8002bc4:	46d9      	mov	r9, fp
 8002bc6:	eb18 0308 	adds.w	r3, r8, r8
 8002bca:	eb49 0409 	adc.w	r4, r9, r9
 8002bce:	4698      	mov	r8, r3
 8002bd0:	46a1      	mov	r9, r4
 8002bd2:	eb18 080a 	adds.w	r8, r8, sl
 8002bd6:	eb49 090b 	adc.w	r9, r9, fp
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002be6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4691      	mov	r9, r2
 8002bf2:	eb1a 0508 	adds.w	r5, sl, r8
 8002bf6:	eb4b 0609 	adc.w	r6, fp, r9
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f04f 0400 	mov.w	r4, #0
 8002c0c:	0094      	lsls	r4, r2, #2
 8002c0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c12:	008b      	lsls	r3, r1, #2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	4628      	mov	r0, r5
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	f7fd feaa 	bl	8000974 <__aeabi_uldivmod>
 8002c20:	4603      	mov	r3, r0
 8002c22:	460c      	mov	r4, r1
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002c28:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	469b      	mov	fp, r3
 8002c36:	f04f 0c00 	mov.w	ip, #0
 8002c3a:	46d9      	mov	r9, fp
 8002c3c:	46e2      	mov	sl, ip
 8002c3e:	eb19 0309 	adds.w	r3, r9, r9
 8002c42:	eb4a 040a 	adc.w	r4, sl, sl
 8002c46:	4699      	mov	r9, r3
 8002c48:	46a2      	mov	sl, r4
 8002c4a:	eb19 090b 	adds.w	r9, r9, fp
 8002c4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c66:	4689      	mov	r9, r1
 8002c68:	4692      	mov	sl, r2
 8002c6a:	eb1b 0509 	adds.w	r5, fp, r9
 8002c6e:	eb4c 060a 	adc.w	r6, ip, sl
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	f04f 0400 	mov.w	r4, #0
 8002c84:	0094      	lsls	r4, r2, #2
 8002c86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c8a:	008b      	lsls	r3, r1, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	4628      	mov	r0, r5
 8002c92:	4631      	mov	r1, r6
 8002c94:	f7fd fe6e 	bl	8000974 <__aeabi_uldivmod>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	2164      	movs	r1, #100	; 0x64
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	3332      	adds	r3, #50	; 0x32
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cbe:	4498      	add	r8, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	469b      	mov	fp, r3
 8002cc4:	f04f 0c00 	mov.w	ip, #0
 8002cc8:	46d9      	mov	r9, fp
 8002cca:	46e2      	mov	sl, ip
 8002ccc:	eb19 0309 	adds.w	r3, r9, r9
 8002cd0:	eb4a 040a 	adc.w	r4, sl, sl
 8002cd4:	4699      	mov	r9, r3
 8002cd6:	46a2      	mov	sl, r4
 8002cd8:	eb19 090b 	adds.w	r9, r9, fp
 8002cdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	4692      	mov	sl, r2
 8002cf8:	eb1b 0509 	adds.w	r5, fp, r9
 8002cfc:	eb4c 060a 	adc.w	r6, ip, sl
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	f04f 0400 	mov.w	r4, #0
 8002d12:	0094      	lsls	r4, r2, #2
 8002d14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d18:	008b      	lsls	r3, r1, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	4628      	mov	r0, r5
 8002d20:	4631      	mov	r1, r6
 8002d22:	f7fd fe27 	bl	8000974 <__aeabi_uldivmod>
 8002d26:	4603      	mov	r3, r0
 8002d28:	460c      	mov	r4, r1
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2164      	movs	r1, #100	; 0x64
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	3332      	adds	r3, #50	; 0x32
 8002d40:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <UART_SetConfig+0x6f4>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4442      	add	r2, r8
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	e7ff      	b.n	8002d56 <UART_SetConfig+0x6e2>
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d60:	40011000 	.word	0x40011000
 8002d64:	40011400 	.word	0x40011400
 8002d68:	51eb851f 	.word	0x51eb851f

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4e0d      	ldr	r6, [pc, #52]	; (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	; (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1ba4      	subs	r4, r4, r6
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2500      	movs	r5, #0
 8002d78:	42a5      	cmp	r5, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4e0b      	ldr	r6, [pc, #44]	; (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	; (8002db0 <__libc_init_array+0x44>)
 8002d80:	f000 f820 	bl	8002dc4 <_init>
 8002d84:	1ba4      	subs	r4, r4, r6
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2500      	movs	r5, #0
 8002d8a:	42a5      	cmp	r5, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d94:	4798      	blx	r3
 8002d96:	3501      	adds	r5, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d9e:	4798      	blx	r3
 8002da0:	3501      	adds	r5, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	08002dfc 	.word	0x08002dfc
 8002da8:	08002dfc 	.word	0x08002dfc
 8002dac:	08002dfc 	.word	0x08002dfc
 8002db0:	08002e00 	.word	0x08002e00

08002db4 <memset>:
 8002db4:	4402      	add	r2, r0
 8002db6:	4603      	mov	r3, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>

08002dc4 <_init>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr

08002dd0 <_fini>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	bf00      	nop
 8002dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd6:	bc08      	pop	{r3}
 8002dd8:	469e      	mov	lr, r3
 8002dda:	4770      	bx	lr
